# To use multiple Angular projects with different Angular versions, you can leverage NPX effectively. 
# This allows you to run a specific version of the Angular CLI (@angular/cli) without globally installing or switching versions. 
# Here’s how you can manage different Angular versions in different projects:
>> npx -p @angular/cli@13.0.1 ng new my-app
>> npx -p @angular/cli@13.0.1 ng new hotelinventoryapp
>> npx -p @angular/cli@13.0.1 ng new my-angular13-app
>> cd my-angular13-app
>> npx -p @angular/cli@13.0.1 ng new my-app
>> The -p or --package flag tells npx:
    >> "Use this package temporarily (without installing globally) and run a command from it."
>> npx -p @angular/cli@13.0.1 -> Downloads the CLI, but does nothing without a command.
>> npx -p @angular/cli@13.0.1 ng new my-app -> Creates a new Angular 13 app.
>> npx -p @angular/cli@13.0.1 ng <command> -> Runs any Angular CLI command using v13.0.1.

//----------------------- IMP. ------------------------
>> It does not install Angular CLI globally.
>> npx -p @angular/cli@13.0.1 ng new hotelinventoryapp
>> cd hotelinventoryapp
>> npx ng version
>> npx ng --version
>> npx ng serve
//-----------------------------------------------------

# NVM stands for Node Version Manager, and it's a powerful tool used to install, manage, and switch between different versions of Node.js on your system.
>> nvm --version
>> nvm install 18.20.2
>> nvm install 20.14.0
>> nvm use 18.20.2
>> nvm list

# Create a angular workspace without an Application
>> ng new hotelinventoryapp --createApplication=false
>> npm i -> to install the packages, it will read the packages from package.json and install.
>> ng g app application_name -> to add application within workspace.

# Create a angular workspace with an Application
>> ng new hotelinventoryapp

>> ng generate component component-name
>> ng g c component-name
>> ng g c home

>> ng generate service service-name
>> ng g s service-name
>> ng g s user

# --- Creating component ---
>> ng g c component_name

#--- Directive ---
>> Directives: Directives are use to change the behaviour and appearance of DOM element.
>> Directives can implement all lifecycle hooks.
>> Directives can not have templates.

# Types of Directives
1. Structural Directive: Directives those are starts with *, these can add or remove element from the DOM.
2. Attribute Directive: these only can modify the element from the DOM, but can't add or remove them.
=== Built-in Directives ===
>> *ngIf
>> *ngFor
>> *ngSwitch
>> ngClass
>> ngStyle

# --- Pipes ---
>> Pipes are used for data transformation.
>> Pipes don't change actual object.

# --- Ngx-Bootstrap ---
>> https://valor-software.com/ngx-bootstrap/documentation
>> npx ng add ngx-bootstrap
>> or
>> npm i bootstrap

# --- LifeCycle Hooks ---
* LifeCycle Hook
// this lifecycle will execute for each and every component.
1. ngOnChanges
2. ngOnInit
3. ngDoCheck
4. ngAfterContentInit
5. ngAfterContentChecked
6. ngAfterViewInit
7. ngAfterViewChecked
8. ngOnDestroy

>> 1. ngOnChanges: ngOnChanges lifecycle hook can be apply to any component which has @Input property, you cannot apply 
    ngOnChanges anywhere else. 
    * It will detect any changes to your @Input values for particular component.
    * You should not implemented 'ngDoCheck' and 'ngOnChanges' together in same component, because both are going to do the same thing.
    * ngOnChanges will detect any changes to your @Input values for particular component.
    * ngDoCheck will detect any changes inside your application.

>> 2. ngOnInit: first constructor then ngOnInit. It should be used in case when we want to show some data from an API call.

>> 3. ngDoCheck: It will be executed everytime when you raise any event/changes, irrespective of where this component is implemented/available.
    * In case it is active it will listen to any changes/event which has happened inside your entire application.
    * It will detect any changes inside your application.
    * It is costly.
    * You should not implemented 'ngDoCheck' and 'ngOnChanges' together in same component, because both are going to do the same thing.
    * ngOnChanges will detect any changes to your @Input values for particular component.
    * ngDoCheck will detect any changes inside your application.

>> 4. ngAfterContentInit

>> 5. ngAfterContentChecked

>> 6. ngAfterViewInit: You need ngAfterViewInit() when you want to interact with child components or DOM elements that Angular has rendered using @ViewChild() or @ViewChildren().
    * Angular will automatically populate reference property of type @ViewChild after ngAfterViewInit() lifecycle hook.
    * @ViewChild typically used when you want to access methods, properties, or DOM elements of a child component from the parent component's TypeScript class.
    * If you try to use a @ViewChild reference before the view is initialized (e.g., in the constructor or ngOnInit()), the reference will be undefined.
    // @ViewChild(HeaderComponent, { static: true })
    // The { static: true } or { static: false } option tells Angular when to resolve the @ViewChild reference during the component’s lifecycle.
    // Setting static: true means:
    // Resolve the view query before Angular runs ngOnInit() — during the component's initialization phase.
    // This makes the @ViewChild available early, inside ngOnInit().
    // { static: true }: It indicates that this component(@ViewChild) is actually safe to use inside ngOnInit() lifecycle hook.
    // Use when the element/component is always present in the template (i.e., not inside *ngIf, *ngFor, etc.).

    // Setting static: false means:
    // Resolve the view query after Angular has fully initialized the view — after ngAfterViewInit().
    // The @ViewChild reference will not be available in ngOnInit(), only in ngAfterViewInit().
    // Use when the element/component is conditionally rendered, e.g., inside *ngIf, *ngFor, etc.
    
>> 7. ngAfterViewChecked

>> 8. ngOnDestroy

# --- Component Communication/Interaction ---
1. Using @Input & @Output
2. Using @ViewChild & @ContentChild
3. Using Services

# --- ChangeDetectionStrategy ---
>> OnPush: ChangeDetectionStrategy.OnPush: 
    > Why to use : Because, We are not modifying the data in this component, data is comming from outside, 
    > So we want this component to not reload.
    // Whenever we are working with ChangeDetectionStrategy.OnPush, the data you are trying to assign should
    // not be mutable. So what we can do, rather than directly modifying the roomList, we have to
    // return a new object every time we modify it.
    // In case if you are modifying an object, you have to return an new object.

    # Requirement to use ChangeDetectionStrategy.OnPush:
    1. The component should not change the data internally.
    2. In case you are assigning or passing some data, it should be come from parent component, and the it should be immutable.

>> Default: ChangeDetectionStrategy.Default;